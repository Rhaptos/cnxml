<?xml version="1.0"?>
<grammar
    xmlns="http://relaxng.org/ns/structure/1.0"
    xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
    xmlns:cnxdoc="http://cnx.rice.edu/cnxdoc"
    datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
    ns="http://cnx.rice.edu/cnxml"
>

<!--
  Common attribute definitions
-->

  <define name="id">
    <attribute name="id">
      <data type="token"/>
    </attribute>
  </define>

  <define name="src">
    <attribute name="src">
      <ref name="URL"/>
    </attribute>
  </define>

  <define name="class-attribute">
    <attribute name="class"/>
  </define>

  <define name="common-attlist">
    <optional>
      <ref name="class-attribute"/>
    </optional>
  </define>

<!--
  Special definitions
-->

  <define name="textextras">
    <text/>
  </define>

  <define name="URL">
    <text/>
  </define>

  <!-- Class of inline elements -->
  <define name="inline-class">
    <choice>
      <ref name="textextras"/>
      <ref name="emphasis"/>
      <ref name="term"/>
	  <ref name="citation"/>
      <ref name="cite"/>
      <ref name="quote-inline"/>
      <ref name="foreign"/>
      <ref name="code-inline"/>
      <ref name="span"/>
      <ref name="note-footnote"/>
    </choice>
  </define>

  <!-- Inline content model -->
  <define name="inline-content">
    <zeroOrMore>
      <choice>
        <ref name="inline-class"/>
        <ref name="linking-class"/>
      </choice>
    </zeroOrMore>
  </define>

  <!-- Elements that can be intermixed freely with 'para' -->
  <define name="basic-blocks-class">
    <choice>
      <ref name="quote-block"/>
      <ref name="code-block"/>
      <ref name="definition"/>
      <ref name="example"/>
      <ref name="note"/>
      <ref name="figure"/>
      <ref name="media"/>
      <ref name="table"/>
      <ref name="list"/>
      <ref name="rule"/>
      <ref name="exercise"/>
      <ref name="equation"/>
      <ref name="div"/>
    </choice>
  </define>

  <!-- Content class for para-like things -->
  <define name="para-content-class">
    <choice>
      <ref name="inline-class"/>
      <ref name="linking-class"/>
      <ref name="basic-blocks-class"/>
    </choice>
  </define>

  <!-- Content class for div-like things -->
  <define name="div-content-class">
    <choice>
      <ref name="para"/>
      <ref name="para-content-class"/>
    </choice>
  </define>

  <define name="titled-div-content">
    <optional>
      <ref name="title-class"/>
    </optional>
    <ref name="div-content"/>
  </define>

  <!-- Content class for elements that can contain 'section' -->
  <define name="section-content-class">
    <choice>
      <ref name="section"/>
      <ref name="para"/>
      <ref name="basic-blocks-class"/>
    </choice>
  </define>

  <define name="section-content">
    <optional>
      <ref name="title-class"/>
    </optional>
    <oneOrMore>
      <ref name="section-content-class"/>
    </oneOrMore>
  </define>

<!--
  Include CALS tables
-->

  <include href="calstable.rng">
    <define name="table.mdl">
      <group>
        <optional>
          <ref name="title-class"/>
        </optional>
        <ref name="table-main.mdl"/>
        <optional>
          <ref name="caption"/>
        </optional>
      </group>
    </define>
    <define name="entry.mdl">
      <zeroOrMore>
        <ref name="div-content-class"/>
      </zeroOrMore>
    </define>
  </include>


<!--
  Document Structure Elements
-->
  <define name="document">
    <cnxdoc:description>The 'document' element is the root document element of a CNXML document.  It serves as the container for the four top-level parts of a document: the optional metadata element, the required content element, and the optional glossary and bibliography elements.  The required first element name specifies the title of the document. </cnxdoc:description>
 
    <element name="document">
      <ref name="document-attlist"/>
      <ref name="document-content"/>
    </element>
  </define>

  <define name="document-attlist">
    <group>
      <ref name="id"/>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="document-content">
    <group>
      <ref name="document-title-class"/>
      <optional>
        <ref name="metadata"/>
      </optional>
      <ref name="content"/>
      <optional>
        <ref name="glossary"/>
      </optional>
      <optional>
        <ref name="bibtex.elem"/>
      </optional>
    </group>
  </define>

  <define name="content">
    <cnxdoc:description> The content element is the heart of a CNXML instance, as it contains the instructional content of the document. </cnxdoc:description>
    <element name="content">
      <ref name="content-attlist"/>
      <ref name="content-content"/>
    </element>
  </define>

  <define name="content-attlist">
    <group>
      <ref name="common-attlist"/>
      <optional>
        <ref name="id"/>
      </optional>
    </group>
  </define>

  <define name="content-content">
    <oneOrMore>
      <ref name="section-content-class"/>
    </oneOrMore>
  </define>

  <define name="section">
    <cnxdoc:description>The section element is used to divide a CNXML document into sections.  section elements may be nested freely within other section elements to create subsections.  The optional first element name specifies the section title.</cnxdoc:description>
    <element name="section">
      <ref name="section-attlist"/>
      <ref name="section-content"/>
    </element>
  </define>

  <define name="section-attlist">
    <group>
      <ref name="common-attlist"/>
      <optional>
        <ref name="id"/>
      </optional>
    </group>
  </define>

  <define name="div">
    <cnxdoc:description> When an author needs to associate a @class attribute with a block of content, but no specific CNXML block element is appropriate as a carrier for the @class, we will provide the generic div element. For unsupported classes, the contents of the div will not be rendered in any special way, but rather as if they were not contained in the div.</cnxdoc:description>
    <element name="div">
      <ref name="div-attlist"/>
      <ref name="div-content"/>
    </element>
  </define>

  <define name="div-attlist">
    <group>
      <ref name="common-attlist"/>
      <ref name="id"/>
    </group>
  </define>

  <define name="div-content">
    <oneOrMore>
      <ref name="div-content-class"/>
    </oneOrMore>
  </define>

  <define name="para">
    <cnxdoc:description>The para element is used to enclose document paragraphs.  para elements are a transitional element within a CNXML document, since they, unlike content and section, may directly contain inline content, including text.  The optional first element name specifies the name of the paragraph.</cnxdoc:description>
    <element name="para">
      <ref name="para-attlist"/>
      <ref name="para-content"/>
    </element>
  </define>

  <define name="para-attlist">
    <group>
      <ref name="id"/>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="para-content">
    <optional>
      <ref name="title-class"/>
    </optional>
    <oneOrMore>
      <ref name="para-content-class"/>
    </oneOrMore>
  </define>

<div cnxdoc:group="titlename">
  <cnxdoc:description> Certain elements may be assigned a title by authors through the use of the title element.  An obvious example is the 'section' element, but in CNXML, many other elements may take an optional title element as their first child as well: para, figure, subfigure, list, item, example, equation, exercise, problem, solution, meaning, rule, statement, and proof.  The document element must take a title element as its first child, to specify the title of the document. </cnxdoc:description>
  <cnxdoc:description> Name is deprecated. In previous versions of CNXML, the title element was called name. Name is still supported but is deprecated in favor of the more accurately named "title". </cnxdoc:description>
  <define name="title">
    <element name="title">
      <ref name="title-attlist"/>
      <ref name="title-content"/>
    </element>
  </define>

  <define name="document-title">
    <element name="title">
      <ref name="title-attlist"/>
      <text/>
    </element>
  </define>

  <define name="name">
    <element name="name">
      <ref name="title-attlist"/>
      <ref name="title-content"/>
    </element>
  </define>

  <define name="document-name">
    <element name="name">
      <ref name="title-attlist"/>
      <text/>
    </element>
  </define>
 

  <define name="title-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="title-content">
    <ref name="inline-content"/>
  </define>

  <define name="title-class">
    <choice>
      <ref name="title"/>
      <ref name="name"/>
    </choice>
  </define>

  <define name="document-title-class">
    <choice>
      <ref name="document-title"/>
      <ref name="document-name"/>
    </choice>
  </define>

</div>

<!--
  Linking Elements
-->

<div cnxdoc:group="linking">

  <define name="cnxn">
    <cnxdoc:description> Use the cnxn element to make links to other Connexions modules in the same repository, and to other parts of the same module.  The value of the optional document attribute specifies the module identifier in the repository of the module being linked to.  If this attribute is omitted, the cnxn is understood to be referring to the module in which it occurs.  The value of the optional target attribute refers to the ID of the element containing the specific part of the document being linked to.  If this attribute is omitted, the cnxn is understood to be pointing to the whole module.  The value of the optional version element refers to version number of the module being referred to.  If this attribute is omitted, the cnxn is understood to be pointing to the latest version of the module.  The value of the optional strength attribute (deprecated) specifies the strength of the relation between the document being linked to and the document from which the link is being made. </cnxdoc:description>
    <element name="cnxn">
      <ref name="cnxn-attlist"/>
      <ref name="cnxn-content"/>
    </element>
  </define>

  <define name="cnxn-attlist">
    <group>
      <optional>
        <attribute name="target"/>
      </optional>
      <optional>
        <attribute name="document"/>
      </optional>
      <optional>
        <attribute name="version"/>
      </optional>
      <optional>
        <attribute name="strength">
          <choice>
            <value>0</value>
            <value>1</value>
            <value>2</value>
            <value>3</value>
            <value>4</value>
            <value>5</value>
            <value>6</value>
            <value>7</value>
            <value>8</value>
            <value>9</value>
          </choice>
        </attribute>
      </optional>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="cnxn-content">
    <ref name="linking-content"/>
  </define>

  <define name="link">
    <cnxdoc:description> Use the link element to create links to other documents that are not Connexions modules in the same repository.  This includes not only HTML files, but also CNXML documents that are not modules in the same repository.  The value of the src attribute specifies the URI of the document being linked to. </cnxdoc:description>
    <element name="link">
      <ref name="link-attlist"/>
      <ref name="link-content"/>
    </element>
  </define>

  <define name="link-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="src"/>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="link-content">
    <ref name="linking-content"/>
  </define>

  <!-- Class of linking elements (split off from inline-class because 
       they may not contain themselves) -->
  <define name="linking-class">
    <choice>
      <ref name="cnxn"/>
      <ref name="link"/>
    </choice>
  </define>

  <!-- Linking element content model -->
  <define name="linking-content">
    <zeroOrMore>
      <ref name="inline-class"/>
    </zeroOrMore>
  </define>
  
  </div>

<!--
  Images and other media
-->

  <define name="media">
    <cnxdoc:description> The media element enables authors to embed digital media such as images (PNG, JPEG, GIF), streaming media, applets, and animation in Connexions modules.</cnxdoc:description>
	<cnxdoc:description> Use the media element to specify that a digital media object should be displayed, played, or rendered in your CNXML document.  The src attribute specifies the URI pointing to the media object.  The type attribute specifies the MIME type of the media object. [note on typical MIME types.]
</cnxdoc:description>
<cnxdoc:description> media elements can be nested to create a preferred order of rendering.  A rendering agent (typically a web browser or a PDF generation system) will render the outermost media object it is able to render in a nested group.  The most common use case for nested media elements is to nest a web-viewable image such as a PNG or a JPEG within an encapsulated Postscript (EPS) file.  The Connexions PDF generation system will use the EPS file in creating the PDF file, while a web browser will bypass it and use the nested PNG or JPEG.</cnxdoc:description>
<cnxdoc:description> While media may occur as a child of several elements, it is usually found within a figure or a subfigure element. </cnxdoc:description>
    <element name="media">
      <ref name="media-attlist"/>
      <ref name="media-content"/>
    </element>
  </define>

  <define name="media-attlist">
    <group>
      <attribute name="type"/>
      <optional>
	    <cnxdoc:description> The alt attribute is provided in order to enable authors to provide a textual surrogate for non-textual media.  </cnxdoc:description>
        <attribute name="alt"/>
      </optional>
      <ref name="src"/>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="media-content">
    <choice>
      <text/>
      <group>
        <zeroOrMore>
          <ref name="param"/>
        </zeroOrMore>
        <optional>
          <ref name="media"/>
        </optional>
      </group>
    </choice>
  </define>

  <define name="param">
    <cnxdoc:description> To specify parameters (e.g. height and width for an image) for the correct rendering or viewing of a piece of media in a CNXML document, add param elements as children of the media element in question.  Each param element takes a name attribute and a value attribute, where the name attribute takes as its value the name of the parameter (e.g. 'height'), and the value attribute takes as its value the value of the attribute (e.g. '300'). </cnxdoc:description>
    <element name="param">
      <ref name="param-attlist"/>
      <ref name="param-content"/>
    </element>
  </define>

  <define name="param-attlist">
    <group>
      <attribute name="name"/>
      <attribute name="value"/>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="param-content">
    <empty/>
  </define>

<!--
  Figures and subfigures
-->
<div cnxdoc:group="FiguresAndSubfigures">
<cnxdoc:description> CNXML provides the figure element and its children as the means to include illustrative figures in your documents, including figures comprising two or more subfigures.</cnxdoc:description>

  <define name="figure">
    <cnxdoc:description> Use the figure element to create figures within a CNXML document.  
When a figure contains a group of subfigures (instead of a media element, a code element, or a CALS table), the orient attribute of the figure element is used to specify the orientation of the subfigures ('horizontal' or 'vertical').</cnxdoc:description>
    <element name="figure">
      <ref name="figure-attlist"/>
      <ref name="figure-content"/>
    </element>
  </define>

  <define name="figure-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <optional>
        <attribute name="orient" a:defaultValue="horizontal">
          <choice>
            <value>horizontal</value>
            <value>vertical</value>
          </choice>
        </attribute>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="figure-content">
    <optional>
      <ref name="title-class"/>
    </optional>
    <choice>
      <group>
        <ref name="subfigure"/>
        <oneOrMore>
          <ref name="subfigure"/>
        </oneOrMore>
      </group>
      <ref name="media"/>
      <ref name="table"/>
      <ref name="code-inline"/>
      <ref name="code-block"/>
    </choice>
    <optional>
      <ref name="caption"/>
    </optional>
  </define>

  <define name="caption">
  <cnxdoc:description> The caption element encloses the caption for a figure or a subfigure element.</cnxdoc:description>
    <element name="caption">
      <ref name="caption-attlist"/>
      <ref name="caption-content"/>
    </element>
  </define>

  <define name="caption-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="caption-content">
    <ref name="inline-content"/>
  </define>

  <define name="subfigure">
    <cnxdoc:description> The subfigure element encloses one of two or more subfigures within a figure element. </cnxdoc:description>
    <element name="subfigure">
      <ref name="subfigure-attlist"/>
      <ref name="subfigure-content"/>
    </element>
  </define>

  <define name="subfigure-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="subfigure-content">
    <group>
      <optional>
        <ref name="title-class"/>
      </optional>
      <choice>
        <ref name="media"/>
        <ref name="table"/>
        <ref name="code-class"/>
      </choice>
      <optional>
        <ref name="caption"/>
      </optional>
    </group>
  </define>
</div>

<div cnxdoc:group="ComputerCode">
<!--
  Computer code
-->
  <cnxdoc:description>Use the code element to enclose computer code of all types, such as programming languages, markup languages, and rule declaration languages.</cnxdoc:description>
  <cnxdoc:description>code takes an optional attribute type, which can take either 'block' or 'inline' as its value.  Use 'block' to indicate that the code segment in question stands apart as a distinct unit from the flow of content around it.  Use 'inline' to indicate that the code segment in question is to be understood as being part of the flow of content around it.  The default value of type is 'inline'.</cnxdoc:description>
  <define name="code-inline">
    <element name="code">
      <ref name="code-inline-attlist"/>
      <ref name="code-content"/>
    </element>
  </define>

  <define name="code-block">
    <element name="code">
      <ref name="code-block-attlist"/>
      <ref name="code-content"/>
    </element>
  </define>

  <define name="code-inline-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <optional>
        <attribute name="type">
          <value>inline</value>
        </attribute>
      </optional>
      <ref name="common-attlist"/>
      <optional>
        <attribute name="lang"/>
      </optional>
    </group>
  </define>

  <define name="code-block-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <attribute name="type">
        <value>block</value>
      </attribute>
      <ref name="common-attlist"/>
      <optional>
        <attribute name="lang"/>
      </optional>
    </group>
  </define>

  <define name="code-content">
    <ref name="inline-content"/>
  </define>

  <define name="code-class">
    <choice>
      <ref name="code-inline"/>
      <ref name="code-block"/>
    </choice>
  </define>

</div>

<!--
  Lists
-->

  <define name="list">
    <cnxdoc:description> CNXML provides elements for bulleted, numbered, named-item, and enumerated lists.  Lists can be nested, since an item element may contain a list element. The list element encloses a series of item elements.</cnxdoc:description>
    <element name="list">
      <ref name="list-attlist"/>
      <ref name="list-content"/>
    </element>
  </define>

  <define name="list-attlist">
    <group>
      <ref name="id"/>
      <optional>
	    <cnxdoc:description>Possible values of this attribute include:
'bulleted' (for an unordered list with bullet points),
'enumerated' (for an ordered, numbered list),
'named-item' (for lists in which each item is named),
The default value of type is 'bulleted'. </cnxdoc:description>
        <attribute name="type"/>
      </optional>
	  <optional>
	    <cnxdoc:description> Display can take 'inline' or 'block' and 'block' is the default. 'inline' is for a list that is part of the flow of content around it.
		</cnxdoc:description>
		<attribute name="display"/>
	  </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="list-content">
    <group>
      <optional>
        <ref name="title-class"/>
      </optional>
      <oneOrMore>
        <ref name="item"/>
      </oneOrMore>
    </group>
  </define>

  <define name="item">
    <cnxdoc:description> The item element encloses the content for one item of a list.</cnxdoc:description>
    <element name="item">
      <ref name="item-attlist"/>
      <ref name="item-content"/>
    </element>
  </define>

  <define name="item-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="item-content">
    <ref name="titled-div-content"/>
  </define>

<!--
  Inline Elements
-->
<div cnxdoc:group="Inline">

<cnxdoc:description> Inline elements are those that can be more or less freely intermixed with textual data.    Rather than denoting distinct structural blocks of content, they are part of the document's textual flow.  Unlike the other groupings of elements in this specification, inline elements  are treated together because they are syntactically rather than semantically similar. </cnxdoc:description>

  <define name="emphasis">
    <cnxdoc:description> The emphasis element confers semantic emphasis on the segment of content that it encloses.  It is not a rendering directive.  Some stylesheets render an emphasized segment in a different typeface than other text, but there is no requirement that they do so.  </cnxdoc:description>
	<cnxdoc:description> If the author supplies class  values of  bold, italics, and/or underline, the online renderer will respect the author's wishes. Multiple effects can be achieved by setting multiple space separated values on the 'class', e. g. class=”bold italics”. 
	</cnxdoc:description>
    <element name="emphasis">
      <ref name="emphasis-attlist"/>
      <ref name="emphasis-content"/>
    </element>
  </define>

  <define name="emphasis-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="emphasis-content">
    <ref name="inline-content"/>
  </define>

  <define name="term">
    <cnxdoc:description> The term element denotes a word or phrase as being part of a terminology or jargon.  If it occurs as the first child of a definition element, then it denotes the term being defined in that definition.  If it occurs as the child of a seealso element within a definition, then it denotes a term related to the one being defined in that definition.  If it occurs as part of inline content, it denotes a term that may or may not be defined elsewhere.  </cnxdoc:description>
    <element name="term">
      <ref name="term-attlist"/>
      <ref name="term-content"/>
    </element>
  </define>

  <define name="term-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <optional>
	    <cnxdoc:description> The optional src attribute is a URI pointing either to the object denoted by the term being defined or to a representation of it, or, optionally in the case of usage in the seealso or inline contexts, to the definition itself.</cnxdoc:description>
        <ref name="src"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="term-content">
    <ref name="inline-content"/>
  </define>

  <define name="citation">
    <cnxdoc:description> The cite element encloses references to non-electronic materials and refers to the whole citation of a work. The format of enclosed content will not be italicized since the proper citation format depends on the type of work. Citations whose src attribute is set to the id of a biliographic reference will link to the bibligraphic reference. It the element is empty, the link text will be the number of the reference; if not empty, the link text will be the contents of the cite. System supplied square brackets around  empty cites with the src attribute set will no longer be supplied in order to give authors more flexibility in formatting their citations. </cnxdoc:description>
    <element name="citation">
      <ref name="cite-attlist"/>
      <ref name="cite-content"/>
    </element>
  </define>
  
  <define name="cite">
    <cnxdoc:description> The cite element is deprecated in favor of citation. </cnxdoc:description>
    <element name="cite">
      <ref name="cite-attlist"/>
      <ref name="cite-content"/>
    </element>
  </define>

  <define name="cite-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <optional>
	    <cnxdoc:description> A relative or absolute URI indicating the path to the object. May also contain the id of a bibtex reference. This is still required to be a URI and thus must be designated using # when referring to an id in a module (&lt;cite src="#white1998"&gt;White, 1998&lt;/cite&gt;). If using a relative path, the file must reside within the module (not at the workspace or workgroup level). If using an absolute path, verify that the file storage location is stable and will not change.</cnxdoc:description>
        <ref name="src"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="cite-content">
    <ref name="inline-content"/>
  </define>

  <define name="span">
    <cnxdoc:description> The span element may contain any character data and is designed to permit authors to associate semantic information of the author's choosing with CNXML elements.  The span element is useful for cases where an author needs to associate an @class attribute with a range of inline content, but no specific CNXML element is appropriate as a carrier for the @class. </cnxdoc:description>
    <cnxdoc:description> Multiple classes on a single element are supported by giving the class attribute a list of space separated values in the associated string.</cnxdoc:description>
	<element name="span">
      <ref name="span-attlist"/>
      <ref name="span-content"/>
    </element>
  </define>

  <define name="span-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="span-content">
    <ref name="inline-content"/>
  </define>
  
  <div cnxdoc:group="quote">
  <cnxdoc:description> The quote element denotes text quoted from a source other than the CNXML document in which it occurs.  It takes an optional type attribute with values of 'inline' or 'block'.  Use 'block' to indicate that the quote in question stands apart as a distinct unit from the flow of content around it.  Use 'inline' to indicate that the quotation in question is to be understood as being part of the flow of content around it.  'inline' is the implied default value.</cnxdoc:description>

  <define name="quote-attlist">
    <group>
      <optional>
	  <cnxdoc:description> The quote element takes an optional src attribute : A relative or absolute URI indicating the path to the object. May also contain the id of a bibtex reference. This is still required to be a URI and thus must be designated using # when referring to an id in a module If using a relative path, the file must reside within the module (not at the workspace or workgroup level). If using an absolute path, verify that the file storage location is stable and will not change.</cnxdoc:description>
        <ref name="src"/>
      </optional>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="quote-inline">
    <cnxdoc:description> The quote element denotes text quoted from a source other than the CNXML document in which it occurs.  It takes an optional type attribute.  Use 'inline' to indicate that the quotation in question is to be understood as being part of the flow of content around it.  'inline' is the implied default value.</cnxdoc:description>
    <element name="quote">
      <ref name="quote-inline-attlist"/>
      <ref name="quote-inline-content"/>
    </element>
  </define>

  <define name="quote-inline-attlist">
    <group>
      <optional>
        <attribute name="type">
          <value>inline</value>
        </attribute>
      </optional>
      <ref name="quote-attlist"/>
    </group>
  </define>

  <define name="quote-inline-content">
    <ref name="inline-content"/>
  </define>

  <define name="quote-block">
    <cnxdoc:description> The quote element denotes text quoted from a source other than the CNXML document in which it occurs.  It takes an optional type attribute. Use 'block' to indicate that the quote in question stands apart as a distinct unit from the flow of content around it. </cnxdoc:description>
  
    <element name="quote">
      <ref name="quote-block-attlist"/>
      <ref name="quote-block-content"/>
    </element>
  </define>

  <define name="quote-block-attlist">
    <group>
      <attribute name="type">
        <value>block</value>
      </attribute>
      <ref name="quote-attlist"/>
    </group>
  </define>

  <define name="quote-block-content">
    <ref name="div-content"/>
  </define>
  
  </div>

  <define name="foreign">
    <cnxdoc:description> The foreign element denotes that its content is a word or phrase from a language other than the one in which the CNXML document is written. </cnxdoc:description>
    <element name="foreign">
      <ref name="foreign-attlist"/>
      <ref name="foreign-content"/>
    </element>
  </define>

  <define name="foreign-attlist">
    <group>
      <optional>
        <ref name="src"/>
      </optional>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="foreign-content">
    <ref name="inline-content"/>
  </define>
  
  </div>

<!--
  Notes
-->
<div cnxdoc:group="note">
  <cnxdoc:description> Notes are a flexible way of drawing a reader's attention to important points in a document.  CNXML provides the note element for this purpose. </cnxdoc:description>
  <cnxdoc:description> Use the note element to add notes to CNXML content.  The optional type attribute can be used to indicate the type of note (e.g. 'warning', 'aside', 'point of interest', 'caveat', 'footnote', 'marginalia'). The attributes control aspects of the label that appears with the note, and the positioning of the note within the flow of the document. Notes can also take an optional title. Note that docbook has notes, warnings, tips, and important. It might be a good idea to support same.</cnxdoc:description>

  <define name="note">
    <element name="note">
      <ref name="note-attlist"/>
      <ref name="note-content"/>
    </element>
  </define>

  <define name="note-attlist">
    <group>
      <optional>
        <attribute name="type">
          <data type="token">
            <except>
              <value>footnote</value>
            </except>
          </data>
        </attribute>
      </optional>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="note-content">
    <ref name="titled-div-content"/>
  </define>

  <define name="note-footnote">
    <element name="note">
      <ref name="note-footnote-attlist"/>
      <ref name="note-content"/>
    </element>
  </define>

  <define name="note-footnote-attlist">
    <group>
      <attribute name="type">
        <value>footnote</value>
      </attribute>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>
</div>
<!--
  Examples
-->

  <define name="example">
    <cnxdoc:description> Examples are often used in teaching to provide concrete illustrations of the material being presented.  CNXML furnishes the example element for the purpose of including examples in instructional content.
</cnxdoc:description>
    <cnxdoc:description>
Use the example element to denote examples within a CNXML document.  example is also useful inside a definition element for providing an example usage of the word defined.</cnxdoc:description>
    <element name="example">
      <ref name="example-attlist"/>
      <ref name="example-content"/>
    </element>
  </define>

  <define name="example-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="example-content">
    <ref name="section-content"/>
  </define>

<!--
  Equations
-->

  <define name="equation">
    <cnxdoc:description> Equations are an important part of instructional content in engineering and the sciences.  Use the equation element to include equations in CNXML documents.</cnxdoc:description>
	<cnxdoc:description> The equation element denotes equations in CNXML content.  The equation content itself may be text or a media object.  Use the optional title attribute of equation to assign a title to the equation.</cnxdoc:description>
    <element name="equation">
      <ref name="equation-attlist"/>
      <ref name="equation-content"/>
    </element>
  </define>

  <define name="equation-attlist">
    <group>
      <ref name="common-attlist"/>
      <ref name="id"/>
    </group>
  </define>

  <define name="equation-content">
    <optional>
      <ref name="title-class"/>
    </optional>
    <oneOrMore>
      <choice>
        <text/>
        <ref name="media"/>
      </choice>
    </oneOrMore>
  </define>

<!--
  Exercises
-->

  <define name="exercise">
    <cnxdoc:description> Exercises can be used in instruction to reinforce learned content and to give the learner a way to assess her progress.  CNXML supplies the exercise element and its children in order for authors to include exercises in their content. The exercise element denotes an exercise comprising a problem and, optionally, one or more solutions.</cnxdoc:description>
	<cnxdoc:description> Exercise, problem, and solution will provide a way for authors to customize the labele that are generated around the parts so that the construct is useful for things like 'case' and 'diagnosis' and 'lemma' and 'proof' etc. </cnxdoc:description>
    <element name="exercise">
      <ref name="exercise-attlist"/>
      <ref name="exercise-content"/>
    </element>
  </define>

  <define name="exercise-attlist">
    <group>
      <ref name="id"/>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="exercise-content">
    <group>
      <optional>
        <ref name="title-class"/>
      </optional>
      <ref name="problem"/>
      <zeroOrMore>
        <ref name="solution"/>
      </zeroOrMore>
    </group>
  </define>

  <define name="problem">
    <cnxdoc:description> The problem element contains the statement of the problem for the containing exercise element.</cnxdoc:description>
    <element name="problem">
      <ref name="problem-attlist"/>
      <ref name="problem-content"/>
    </element>
  </define>

  <define name="problem-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="problem-content">
    <ref name="section-content"/>
  </define>

  <define name="solution">
    <cnxdoc:description> The 'solution' element contains a possible solution to the problem stated in the foregoing problem element. Online, the solution is hidden until the reader clicks on the solution link. In print, solutions are grouped at the end of modules or chapters in collections. </cnxdoc:description>
    <element name="solution">
      <ref name="solution-attlist"/>
      <ref name="solution-content"/>
    </element>
  </define>

  <define name="solution-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="solution-content">
    <ref name="section-content"/>
  </define>

<!--
  Definitions
-->

  <define name="definition">
    <cnxdoc:description> The definition element specifies the meanings of a given term.  In addtion to a term element with one or more meaning elements, it may also contain example elements with examples of the usage of the term, and seealso elements that refer to other terms that are related in some way to the term being defined.</cnxdoc:description>
    <element name="definition">
      <ref name="definition-attlist"/>
      <ref name="definition-content"/>
    </element>
  </define>

  <define name="definition-attlist">
    <group>
      <ref name="id"/>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="definition-content">
    <group>
      <ref name="term"/>
      <oneOrMore>
        <ref name="meaning"/>
        <zeroOrMore>
          <ref name="example"/>
        </zeroOrMore>
        <optional>
          <ref name="seealso"/>
        </optional>
      </oneOrMore>
    </group>
  </define>

  <define name="meaning">
    <cnxdoc:description> The meaning element contains a meaning of the term being defined.in the parent definition element.</cnxdoc:description>
    <element name="meaning">
      <ref name="meaning-attlist"/>
      <ref name="meaning-content"/>
    </element>
  </define>

  <define name="meaning-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="meaning-content">
    <ref name="titled-div-content"/>
  </define>

  <define name="seealso">
    <cnxdoc:description> The seealso element contains one or more term elements that refer to terms that are related in some fashion to the one being defined.  For example, they may be synonyms, or terms for related but not identical concepts, or broader or narrower terms.</cnxdoc:description>
    <element name="seealso">
      <ref name="seealso-attlist"/>
      <ref name="seealso-content"/>
    </element>
  </define>

  <define name="seealso-attlist">
    <ref name="common-attlist"/>
  </define>

  <define name="seealso-content">
    <oneOrMore>
      <ref name="term"/>
    </oneOrMore>
  </define>

<!--
  Proofs and Rules
-->

<div cnxdoc:group="ProofsAndRules">
  <cnxdoc:description> In many disciplines, it is useful to include various sorts of rules (theorems, corollaries, axioms, lemmas, rule of thumb, etc) as part of instructional material.  Use the rule element and its children to include statements of rules in CNXML documents.</cnxdoc:description>
  
  <define name="rule">
    <cnxdoc:description> The rule element specifies a rule by means of a statement element, with optional 'proof' and example elements to demonstrate and exemplify the rule. The optional title element at the beginning of the rule can be used to specify the title of the rule, e.g. "Moore's Law".</cnxdoc:description>
    <element name="rule">
      <ref name="rule-attlist"/>
      <ref name="rule-content"/>
    </element>
  </define>

  <define name="rule-attlist">
    <group>
      <ref name="id"/>
      <attribute name="type"/>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="rule-content">
    <group>
      <optional>
        <ref name="title-class"/>
      </optional>
      <oneOrMore>
        <ref name="statement"/>
      </oneOrMore>
      <zeroOrMore>
        <choice>
          <ref name="proof"/>
          <ref name="example"/>
        </choice>
      </zeroOrMore>
    </group>
  </define>

  <define name="statement">
    <cnxdoc:description> Use the statement element to give the statement of a rule. </cnxdoc:description>
    <element name="statement">
      <ref name="statement-attlist"/>
      <ref name="statement-content"/>
    </element>
  </define>

  <define name="statement-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="statement-content">
    <ref name="section-content"/>
  </define>

  <define name="proof">
    <cnxdoc:description> Use the proof element to supply a proof of a rule.</cnxdoc:description>
    <element name="proof">
      <ref name="proof-attlist"/>
      <ref name="proof-content"/>
    </element>
  </define>

  <define name="proof-attlist">
    <group>
      <optional>
        <ref name="id"/>
      </optional>
      <ref name="common-attlist"/>
    </group>
  </define>

  <define name="proof-content">
    <ref name="section-content"/>
  </define>

</div>

  <define name="glossary">
    <element name="glossary">
      <ref name="glossary-attlist"/>
      <ref name="glossary-content"/>
    </element>
  </define>

  <define name="glossary-attlist">
    <group>
      <ref name="common-attlist"/>
      <optional>
        <ref name="id"/>
      </optional>
    </group>
  </define>

<!--
  Glossaries
-->

  <define name="glossary-content">
    <oneOrMore>
      <ref name="definition"/>
    </oneOrMore>
  </define>

<!--
  Other namespaces: MDML and BibTeXmL
-->

  <define name="metadata">
    <element name="metadata">
      <ref name="metadata-attlist"/>
      <ref name="metadata-content"/>
    </element>
  </define>

  <define name="metadata-attlist">
    <ref name="common-attlist"/>
  </define>

  <define name="metadata-content">
    <oneOrMore>
      <ref name="metadata.elem"/>
    </oneOrMore>
  </define>

  <define name="metadata.elem">
    <element>
      <nsName ns="http://cnx.rice.edu/mdml/0.4"/>
      <zeroOrMore>
        <choice>
          <attribute>
            <anyName/>
          </attribute>
          <text/>
          <ref name="metadata.elem"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>

  <define name="bibtex.elem">
    <element>
      <nsName ns="http://bibtexml.sf.net/"/>
      <zeroOrMore>
        <choice>
          <attribute>
            <anyName/>
          </attribute>
          <text/>
          <ref name="bibtex.elem"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>

</grammar>
